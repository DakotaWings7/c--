Функции:
int** memory_allocation(int n, int m) {
	int** a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];
	return a;
}
void Fill_array(int a[], int n) {	
	for (int i = 0; i < n; i++) {
		printf("a[%d]= ", i); scanf_s("%d", &a[i]);
	}

}
void Fill_array(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			printf("a[%d][%d] = ", i, j); scanf_s("%d", &a[i][j]);
		}
	}
}
void Print_array(int ** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			printf("a[%d][%d] = ", i, j);
			printf("%d\n", a[i][j]);
		}
	}
}
void delete_Array(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		delete[] a[i];
	}
	delete[] a;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №16, ближайший элемент к M
#include<iostream>
#include<stdio.h>
using namespace std;

void Nearest_element(int a[], int n, int& m, int& diff, int& ind) {
	for (int i = 0; i < n; i++) {
		if (abs(a[i] - m) < diff) {
			ind = i;
			diff = abs(a[i] - m);
		}
	}
}

int main() {
	int index, difference = INT_MAX, N = 4, M;
	int* arr = new int[N];
	Fill_array(arr, N);
	printf("Enter M: "); scanf_s("%d", &M);
	
	Nearest_element(arr, N, M, difference, index);
	printf("%d\n" "%d\n", index, arr[index]);
	
	delete[] arr;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №17 строка с наименьшей суммой элементов
#include<iostream>
using namespace std;

int sum_of_row(int** a, int m, int i, int &sum) {
	for (int j = 0; j < m; j++)
		sum += a[i][j];
	return sum;
}

void N_17(int** a, int n, int m, int &row_number, int &min_row, int &sum) {
	for (int i = 0; i < n; i++) {
		sum = 0;
		if (sum_of_row(a, m, i, sum) < min_row) {
			min_row = sum;
			row_number = i;
		}
	}
}
int main() {
	int n = 2, m = 2, row_number, min_row = INT_MAX, sum;

	int** a = memory_allocation(n, m);
	Fill_array(a, n, m);
	N_17(a, n, m, row_number, min_row, sum);

	printf("%d\n" "%d\n", row_number + 1, min_row);
	delete_Array(a, n, m);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №18a Транспонирование
#include<iostream>
using namespace std;

void Transposition(int** a, int** a_t, int n) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			a_t[i][j] = a[j][i];
	}
}

int main() {
	int n = 2;
	int** a   = memory_allocation(n, n);
	int** a_t = memory_allocation(n, n);

	Fill_array(a, n, n);

	Transposition(a, a_t, n);

	Print_array(a, n, n);
	printf("\n");
	Print_array(a_t, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №18b Транспонирование
#include<iostream>
using namespace std;

void Transposition(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			a[i][j] = a[j][i];
	}
}
int main() {
	int n = 3;
	
	int** a = memory_allocation(n, n);
	Fill_array(a, n, n);

	Transposition(a, n, n);

	printf("\n");
	Print_array(a, n, n);

	delete_Array(a, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №19 элементы попарно различны
#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "ru");
	const int n = 3;
	const int m = 4;
	int arr[n][m];
	for (int i = 0; i < n; i++) {
		printf("%s" "%d" "%s" "%d" "%s",
			"Введите ", i, " строку матрицы, содержащую ",
			m, " элементов: ");
		for (int j = 0; j < m; j++) {
			scanf_s("%d", &arr[i][j]);
		}
	}

	int count1 = 0, count2 = 0;
	bool F = 0;
	for (int i = 0; i < n; i++) {  // поиск попарно различных в каждой строке
		F = 0;
		for (int j = 0; j < m - 1; j++) {
			for (int k = j + 1; k < m; k++) {
				if (arr[i][j] == arr[i][k]) {
					F = 0;
					break;
				}
				else
					F = 1;
			}
			if (!F)
				break;
		}
		if (F)
			count1 += 1;
	}

	for (int i = 0; i < m; i++) {	// поиск попарно различных в каждом столбце
		F = 0;
		for (int j = 0; j < n - 1; j++) {
			for (int k = j + 1; k < n; k++) {
				if (arr[j][i] == arr[k][i]) {
					F = 0;
					break;
				}
				else
					F = 1;
			}
			if (!F)
				break;
		}
		if (F)
			count2 += 1;
	}
	if (count1 > 0)
		printf("%s" "%d\n", "Количество строк, в которых эл-ты попарно различны: ", count1);
	else
		printf("Таких строк нет\n");
	if (count2 > 0)
		printf("%s" "%d\n", "Количество столбцов, в которых эл-ты попарно различны: ", count2);
	else
		printf("Таких столбцов нет\n");
}

-------------------------------------------------------------------------------------------------------------------------------------
// №22 Дана квадратная вещественная матрица n x n
#include<iostream>	
using namespace std;
int main() {
	setlocale(LC_ALL, "ru");
	const int n = 3;
	int arr[n][n] = {0};
	printf("%s" "%d" "%s" "%d" "%s", "Введите двумерный массив размера ", n, "x", n, ":\n");
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf_s("%d", &arr[i][j]);
		}
	}
	int S1 = 0, S2 = 0, S3 = 0, S4 = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j)
				S1 += arr[i][j];
			if (i + j == 2)
				S2 += arr[i][j];
			if (i > j)
				S3 += arr[i][j];
			if (i < j)
				S4 += arr[i][j];
		}
	}
	printf("%s" "%d" "%s", "Cумма элементов главной диагонали: ", S1, "\n");
	printf("%s" "%d" "%s", "Cумма элементов побочной диагонали: ", S2, "\n");
	printf("%s" "%d" "%s", "Cумма элементов ниже главной диагонали: ", S3, "\n");
	printf("%s" "%d" "%s", "Cумма элементов выше главной диагонали: ", S4, "\n");
}
-------------------------------------------------------------------------------------------------------------------------------------
