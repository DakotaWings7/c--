Функции:
int** memory_allocation(int n, int m) {
	int** a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];
	return a;
}
void Fill_array(int* a, int n) {
	for (int i = 0; i < n; i++) {
		printf("a[%d] = ", i); scanf_s("%d", &a[i]);
	}
}
void Fill_array(int** a, int n, int m) {
	printf("Enter array:\n");
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++)
			scanf_s("%d", &a[i][j]);
	}
}
void Print_array(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++)
			printf("%d ", a[i][j]);
		printf("\n");
	}
	printf("\n");
}
void delete_Array(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		delete[] a[i];
	}
	delete[] a;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №16, ближайший элемент к M
#include<iostream>
#include<stdio.h>
using namespace std;

void Nearest_element(int* a, int n, int& m, int& diff, int& ind) {
	for (int i = 0; i < n; i++) {
		if (abs(a[i] - m) < diff) {
			ind = i;
			diff = abs(a[i] - m);
		}
	}
}

int main() {
	int index, difference = INT_MAX, N = 4, M;
	int* arr = new int[N];
	Fill_array(arr, N);
	printf("Enter M: "); scanf_s("%d", &M);
	
	Nearest_element(arr, N, M, difference, index);
	printf("%d\n" "%d\n", index, arr[index]);
	
	delete[] arr;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №17 строка с наименьшей суммой элементов
#include<iostream>
using namespace std;

int sum_of_row(int** a, int m, int i, int &sum) {
	for (int j = 0; j < m; j++)
		sum += a[i][j];
	return sum;
}

void N_17(int** a, int n, int m, int &row_number, int &min_row, int &sum) {
	for (int i = 0; i < n; i++) {
		sum = 0;
		if (sum_of_row(a, m, i, sum) < min_row) {
			min_row = sum;
			row_number = i;
		}
	}
}
int main() {
	int n = 2, m = 2, row_number, min_row = INT_MAX, sum;

	int** a = memory_allocation(n, m);
	Fill_array(a, n, m);
	N_17(a, n, m, row_number, min_row, sum);

	printf("%d\n" "%d\n", row_number + 1, min_row);
	delete_Array(a, n, m);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №18a Транспонирование
#include<iostream>
using namespace std;

void Transposition(int** a, int** a_t, int n) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			a_t[i][j] = a[j][i];
	}
}

int main() {
	int n = 2;
	int** a   = memory_allocation(n, n);
	int** a_t = memory_allocation(n, n);

	Fill_array(a, n, n);

	Transposition(a, a_t, n);

	Print_array(a, n, n);
	printf("\n");
	Print_array(a_t, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №18b Транспонирование
#include<iostream>
using namespace std;

void N_18_b(int** a, int n, int m) {
	int** temp = memory_allocation(n, n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			temp[i][j] = a[i][j];
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++)
			a[i][j] = temp[j][i];
	}
}
int main() {
	int n = 2;
	int** a = memory_allocation(n, n);
	Fill_array(a, n, n);
	printf("\n");
	Print_array(a, n, n);

	N_18_b(a, n, n);

	printf("\n");
	Print_array(a, n, n);

	delete_Array(a, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №19 элементы попарно различны
#include<iostream>
using namespace std;

int pair_checker_in_rows(int** a, int m, int i) {
	for (int j = 0; j < m - 1; j++) {
		if (a[i][j] == a[i][j + 1])
			return 0;
	}
	return 1;
}

int pair_checker_in_colls(int** a, int n, int i) {
	for (int j = 0; j < n - 1; j++) {
		if (a[j][i] == a[j + 1][i])
			return 0;
	}
	return 1;
}

void count_checker(int** a, int n, int m, int &count1, int& count2) {
	for (int i = 0; i < n; i++) {
		count1 += pair_checker_in_rows(a, n, i);
		count2 += pair_checker_in_colls(a, m, i);
	}
}

int main() {
	setlocale(LC_ALL, "ru");

	int n = 2, m = 2;
	int** a = memory_allocation(n, m);
	Fill_array(a, n, m);

	int count1 = 0, count2 = 0;
	count_checker(a, n, m, count1, count2);

	if (count1 > 0)
		printf("%s" "%d\n", "Количество строк, в которых эл-ты попарно различны: ", count1);
	else
		printf("Таких строк нет\n");
	if (count2 > 0)
		printf("%s" "%d\n", "Количество столбцов, в которых эл-ты попарно различны: ", count2);
	else
		printf("Таких столбцов нет\n");

	delete_Array(a, n, m);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №20 Между первым совершенным и последним, арифметической прогрессией
#include<iostream>
using namespace std;

int first_perfect_number(int* a, int n, int& first_a) {
	for (int i = 0; i < n; i++) {
		for (int j = 2; j <= a[i] / 2; j++) {
			if (a[i] % j == 0) 
				return first_a = i;
		}
	}
}

void last_perfect_number(int* a, int n, int &last_a) {
	for (int i = 0; i < n; i++) {
		for (int j = 2; j <= a[i] / 2; j++) {
			if (a[i] % j == 0)
				last_a = i;
		}
	}
}
bool Progression_checker(int* a, int first_a, int last_a) {
	int difference = a[first_a + 1] - a[first_a + 2];
	for (int i = first_a + 1; i < last_a - 1; i++) {
		if (a[i] - a[i + 1] != difference)
			return 0;
	}
	return 1;
}
int main() {
	int n = 5;
	int* a = new int[n];
	Fill_array(a, n);
	int last_a, first_a;

	first_perfect_number(a, n, first_a);
	last_perfect_number(a, n, last_a);
	
	if(last_a - first_a < 2) 
		printf("There's no sequence");
	else
		if (Progression_checker)
			printf("Yes\n");
		else
			printf("No");
	delete[] a;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №21 Скалярное произведение строки на столбец, на пересечении которых находится последний мин элемент
#include<iostream>
using namespace std;

int last_min(int** a, int n, int m, int& x, int& y) {
	int min = INT_MAX;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] <= min) {
				min = a[i][j];
				x = i; y = j;
			}
		}
	}
	return min;
}
int* collumn(int** a, int n, int j) {
	int* coll = new int[n];
	for (int i = 0; i < n; i++)
		coll[i] = a[i][j];
	return coll;
}
int scalar_product(int* a, int* b, int n) {
	int product = 0;
	for (int i = 0; i < n; i++)
		product += a[i] * b[i];
	return product;
}

int main() {
	int n = 2;
	int** a = memory_allocation(n, n);
	Fill_array(a, n, n);

	int x, y;
	int mn = last_min(a, n, n, x, y);
	int* row = a[x];
	int* coll = collumn(a, n, y);

	printf("scalar product of %d row and %d column is %d\n", x, y, scalar_product(row, coll, n));

	delete_Array(a, n, n);
	delete[] coll;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №22 Дана квадратная вещественная матрица n x n
#include<iostream>	
using namespace std;

int main_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++)
		sum += a[i][i];
	return sum;
}

int side_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++)
		sum += a[i][n - 1 - i];
	return sum;
}

int sum_over_main_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++)
			sum += a[j][i];
	}
	return sum;
}

int sum_under_main_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++)
			sum += a[i][j];
	}
	return sum;
}

int main() {
	setlocale(LC_ALL, "ru");
	int n = 3;
	int** a = memory_allocation(n, n);
	Fill_array(a, n, n);

	printf("%s" "%d" "%s", "Cумма элементов главной диагонали: ", main_diagonal(a, n, n), "\n");
	printf("%s" "%d" "%s", "Cумма элементов побочной диагонали: ", side_diagonal(a, n, n), "\n");
	printf("%s" "%d" "%s", "Cумма элементов ниже главной диагонали: ", sum_over_main_diagonal(a, n, n), "\n");
	printf("%s" "%d" "%s", "Cумма элементов выше главной диагонали: ", sum_under_main_diagonal(a, n, n), "\n");

	delete_Array(a, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №23 Проверка на число Фибоначчи
#include<iostream>
using namespace std;

bool Fibonacci_сheeeck(int f) {
	int f0 = 1, f1 = 1, f2 = 1;
	while (f2 < f) {
		f2 = f1 + f0;
		f0 = f1; f1 = f2;
	}
	return f == f2;
}
int Array_Fib(int* a, int n) {
	int count = 0;
	for (int i = 0; i < n; i++) {
		if (Fibonacci_сheeeck(a[i]))
			count += 1;
	}
	return count;
}

int main() {
	int n = 10;
	int* b = new int[n];
	Fill_array(b, n);
	printf("Number of Fibonacci numbers: %d", Array_Fib(b, n));
	delete [] b;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №24 Две матрицы A, B, построить C, C[i][j] = sum(elementsA(i)\B{j})
#include<iostream>
using namespace std;

void Fill_void_array(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			a[i][j] = 0;
		}
	}
}

bool Check(int** A, int** B, int n, int i, int g, int j) {
	for (int k = 0; k < n; k++) {
		if (A[i][g] == B[k][j])
			return 0;
	}
	return 1;
}

int Fill_C_i_j(int** A, int** B, int m, int n, int i, int j) {
	int sum = 0;
	for (int g = 0; g < m; g++) {
		if (Check(A, B, n, i, g, j))
			sum += A[i][g];
	}
	return sum;
}

void Fill_C(int** C, int** A, int** B, int m, int n) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++)
			C[i][j] = Fill_C_i_j(A, B, m, n, i, j);
	}
}

int main() {
	int n = 2, m = 2;
	int** A = memory_allocation(n, m);
	int** B = memory_allocation(n, m);
	int** C = memory_allocation(n, m);
	Fill_array(A, n, m);
	Fill_array(B, n, m);
	Fill_void_array(C, n, m);
	printf("\n");

	Fill_C(C, A, B, m, n);
	Print_array(C, n, m);

	delete_Array(A, n, m);
	delete_Array(B, n, m);
	delete_Array(C, n, m);
}
-------------------------------------------------------------------------------------------------------------------------------------
//№25 вернуть k = 2, если оба упорядочены по неубыванию, k = 1, если хотя-бы один
#include<iostream>
using namespace std;

void Fill_array(int* a, int n) {
	printf("Fill array[%d]:\n", n);
	for (int i = 0; i < n; i++)
		scanf_s("%d", &a[i]);
}

int isSorted(int* a, int n) {
	for (int i = 0; i < n - 1; i++) {
		if (a[i] > a[i + 1])
			return 0;
	}
	return 1;
}

int k_ch(int* a, int* b, int n, int m, int &k) {
	k = isSorted(a, n) + isSorted(b, m);
	return k;
}

int main() {
	int n = 4, m = 4;
	int* a = new int[n];
	int* b = new int[m];
	Fill_array(a, n);
	printf("\n");
	Fill_array(b, n);
	
	int k;

	printf("k is: %d", k_ch(a, b, n, m, k));
	delete[] a;
	delete[] b;
}


----------------------------------------
//		I) На предприятии есть БД о сотрудниках:
// 1) Ф.И.О (char 30);	2) год рождения; 
// 3) Оклад float;		4) дата устройства на работу char[11];
// 
// Программа выводит список сотрудников, стаж которых > 20 лет

#define _CRT_SECURE_NO_WARNINGS

#include<string.h>
#include<iostream>
#include<math.h>

class Worker {
private:
	char* fio;
	char born[5];
	int salary;
	char date_start[11];

public:
	Worker() {
		fio = new char[20];
		born[0] = '\0';
		salary = 0;
		date_start[0] = '\0';
	}

	Worker(int n) { 
		fio = new char[n];
		born[0] = '\0';
		salary = 0;
		date_start[0] = '\0';
	}

	void setFio(char* s) { strcpy(fio, s); }
	void setBorn(char* s) { strcpy(born, s); }
	void setSalary(int a) { salary = a; }
	void setDate(char* s) { strcpy(date_start, s); }
	
	char* getFio() { return fio; }
	char* getBorn() { return born; }
	int getSalary() { return salary; }
	char* getDate() { return date_start; }

	void Print() {
		printf("%s %s %d %s\n", fio, born, salary, date_start);
	}

	void Scanf() {
		char inits[5];
		scanf("%s%s%s%d%s", fio, inits, born, &salary, date_start);
		strcat(fio, " ");
		strcat(fio, inits);
	}
};

int pow(int a, int b) {
	int result = 1;
	for (int i = 0; i < b; i++)	result *= a;
	return result;
}

const int THIS_YEAR = 2022;

int getExperience(char* str) {
	int j = 3, k = 6;
	int year = 0;
	while (str[k]) {
		year += pow(10, j) * (str[k] - '0');
		k++; j--;
	}
	return THIS_YEAR - year;
}



//		II) Описать Base:
//	Поля: массив Worker, текущая размерность, максимальная размерность
//	Методы:
// а) Конструкторы; б) Деструкторы; в) Создание базы из текстового файла; г) Печать базы;
// д) Добавление в базу; е) Удаление из базы; ж) Корректировка записей; з) Копирование базы;
// и) Увеличение памяти для базы;

class Base {
private:
	Worker* a;
	int n; // текущая размерность
	int max_n; // максимальная размерность
public:
	Base() {
		max_n = 100;
		a = new Worker[n];
		n = 0;
	}
	Base(int maxn) {
		max_n = maxn;
		a = new Worker[max_n];
		n = 0;
	}
	~Base() {
		delete[] a;
	}

	void setWorkerBase(Worker* a) { this->a = a; }
	void setCurrentSize(int n) { this->n = n; }
	void setMaxSize(int max_n) { this->max_n = max_n; }

	Worker* getWorkerBase() { return a; }
	int getCurrentSize() { return n; }
	int getMaxSize() { return max_n; }

	int getBaseFromFile(const char* fname) {
		FILE* f;
		if((f = fopen(fname, "r")) == NULL) return 1;
		char* fio = new char[20];
		char born[5];
		int salary;
		char date_start[11];
		char inits[5];
		int k = 0;
		while (fscanf(f, "%s%s%s%d%s", fio, inits, born, &salary, date_start) == 5) {
			strcat(fio, " ");
			strcat(fio, inits);
			a[k].setFio(fio);
			a[k].setBorn(born);
			a[k].setSalary(salary);
			a[k].setDate(date_start);
			k++;
		}
		n = k;
		fclose(f);
		return 0;
	}
	void PrintBase() {
		for (int i = 0; i < n; i++)
			a[i].Print();
	}
};

int main() {
	/*int i;					// Worker's experience >=- 20
	Worker base[100];

	for (i = 0; i < 3; i++)
		base[i].Scanf();
	
	printf("-------------------------------\n");

	for (i = 0; i < 3; i++)
	{
		if (getExperience(base[i].getDate()) >= 20)
			base[i].Print();
	}*/

	Base workersBase;
	if (!workersBase.getBaseFromFile("1.txt"))
		printf("Ok\n");
	
}
