Функции:
int** memory_allocation(int n, int m) {
	int** a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];
	return a;
}
void Fill_array(int* a, int n) {
	for (int i = 0; i < n; i++) {
		printf("a[%d] = ", i); scanf_s("%d", &a[i]);
	}
}
void Fill_array(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			printf("a[%d][%d] = ", i, j); scanf_s("%d", &a[i][j]);
		}
	}
}
void Print_array(int ** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			printf("a[%d][%d] = ", i, j);
			printf("%d\n", a[i][j]);
		}
	}
}
void delete_Array(int** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		delete[] a[i];
	}
	delete[] a;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №16, ближайший элемент к M
#include<iostream>
#include<stdio.h>
using namespace std;

void Nearest_element(int a[], int n, int& m, int& diff, int& ind) {
	for (int i = 0; i < n; i++) {
		if (abs(a[i] - m) < diff) {
			ind = i;
			diff = abs(a[i] - m);
		}
	}
}

int main() {
	int index, difference = INT_MAX, N = 4, M;
	int* arr = new int[N];
	Fill_array(arr, N);
	printf("Enter M: "); scanf_s("%d", &M);
	
	Nearest_element(arr, N, M, difference, index);
	printf("%d\n" "%d\n", index, arr[index]);
	
	delete[] arr;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №17 строка с наименьшей суммой элементов
#include<iostream>
using namespace std;

int sum_of_row(int** a, int m, int i, int &sum) {
	for (int j = 0; j < m; j++)
		sum += a[i][j];
	return sum;
}

void N_17(int** a, int n, int m, int &row_number, int &min_row, int &sum) {
	for (int i = 0; i < n; i++) {
		sum = 0;
		if (sum_of_row(a, m, i, sum) < min_row) {
			min_row = sum;
			row_number = i;
		}
	}
}
int main() {
	int n = 2, m = 2, row_number, min_row = INT_MAX, sum;

	int** a = memory_allocation(n, m);
	Fill_array(a, n, m);
	N_17(a, n, m, row_number, min_row, sum);

	printf("%d\n" "%d\n", row_number + 1, min_row);
	delete_Array(a, n, m);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №18a Транспонирование
#include<iostream>
using namespace std;

void Transposition(int** a, int** a_t, int n) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			a_t[i][j] = a[j][i];
	}
}

int main() {
	int n = 2;
	int** a   = memory_allocation(n, n);
	int** a_t = memory_allocation(n, n);

	Fill_array(a, n, n);

	Transposition(a, a_t, n);

	Print_array(a, n, n);
	printf("\n");
	Print_array(a_t, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №18b Транспонирование
#include<iostream>
using namespace std;

void N_18_b(int** a, int n, int m) {
	int** temp = memory_allocation(n, n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			temp[i][j] = a[i][j];
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++)
			a[i][j] = temp[j][i];
	}
}
int main() {
	int n = 2;
	int** a = memory_allocation(n, n);
	Fill_array(a, n, n);
	printf("\n");
	Print_array(a, n, n);

	N_18_b(a, n, n);

	printf("\n");
	Print_array(a, n, n);

	delete_Array(a, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №19 элементы попарно различны
#include<iostream>
using namespace std;

int pair_checker_in_rows(int** a, int m, int i) {
	for (int j = 0; j < m - 1; j++) {
		if (a[i][j] == a[i][j + 1])
			return 0;
	}
	return 1;
}

int pair_checker_in_colls(int** a, int n, int i) {
	for (int j = 0; j < n - 1; j++) {
		if (a[j][i] == a[j + 1][i])
			return 0;
	}
	return 1;
}

void count_checker(int** a, int n, int m, int &count1, int& count2) {
	for (int i = 0; i < n; i++) {
		count1 += pair_checker_in_rows(a, n, i);
		count2 += pair_checker_in_colls(a, m, i);
	}
}

int main() {
	setlocale(LC_ALL, "ru");

	int n = 2, m = 2;
	int** a = memory_allocation(n, m);
	Fill_array(a, n, m);

	int count1 = 0, count2 = 0;
	count_checker(a, n, m, count1, count2);

	if (count1 > 0)
		printf("%s" "%d\n", "Количество строк, в которых эл-ты попарно различны: ", count1);
	else
		printf("Таких строк нет\n");
	if (count2 > 0)
		printf("%s" "%d\n", "Количество столбцов, в которых эл-ты попарно различны: ", count2);
	else
		printf("Таких столбцов нет\n");

	delete_Array(a, n, m);
}
-------------------------------------------------------------------------------------------------------------------------------------
// №20 Между первым совершенным и последним, арифметической прогрессией
#include<iostream>
using namespace std;

int first_perfect_number(int* a, int n, int& first_a) {
	for (int i = 0; i < n; i++) {
		for (int j = 2; j <= a[i] / 2; j++) {
			if (a[i] % j == 0) 
				return first_a = i;
		}
	}
}

void last_perfect_number(int* a, int n, int &last_a) {
	for (int i = 0; i < n; i++) {
		for (int j = 2; j <= a[i] / 2; j++) {
			if (a[i] % j == 0)
				last_a = i;
		}
	}
}
bool Progression_checker(int* a, int first_a, int last_a) {
	int difference = a[first_a + 1] - a[first_a + 2];
	for (int i = first_a + 1; i < last_a - 1; i++) {
		if (a[i] - a[i + 1] != difference)
			return 0;
	}
	return 1;
}
int main() {
	int n = 5;
	int* a = new int[n];
	Fill_array(a, n);
	int last_a, first_a;

	first_perfect_number(a, n, first_a);
	last_perfect_number(a, n, last_a);
	
	if(last_a - first_a < 2) 
		printf("There's no sequence");
	else
		if (Progression_checker)
			printf("Yes\n");
		else
			printf("No");
	delete[] a;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №21 Скалярное произведение строки на столбец, на пересечении которых находится последний мин элемент
#include<iostream>
using namespace std;

int last_min(int** a, int n, int m, int& x, int& y) {
	int min = INT_MAX;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] <= min) {
				min = a[i][j];
				x = i; y = j;
			}
		}
	}
	return min;
}
int* collumn(int** a, int n, int j) {
	int* coll = new int[n];
	for (int i = 0; i < n; i++)
		coll[i] = a[i][j];
	return coll;
}
int scalar_product(int* a, int* b, int n) {
	int product = 0;
	for (int i = 0; i < n; i++)
		product += a[i] * b[i];
	return product;
}

int main() {
	int n = 2;
	int** a = memory_allocation(n, n);
	Fill_array(a, n, n);

	int x, y;
	int mn = last_min(a, n, n, x, y);
	int* row = a[x];
	int* coll = collumn(a, n, y);

	printf("Smallest element is %d on place %d %d\n", mn, x, y);
	printf("scalar product of %d row and %d column is %d\n", x, y, scalar_product(row, coll, n));

	delete_Array(a, n, n);
	delete[] coll;
}
-------------------------------------------------------------------------------------------------------------------------------------
// №22 Дана квадратная вещественная матрица n x n
#include<iostream>	
using namespace std;

int main_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++)
		sum += a[i][i];
	return sum;
}

int side_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++)
		sum += a[i][n - 1 - i];
	return sum;
}

int sum_over_main_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++)
			sum += a[j][i];
	}
	return sum;
}

int sum_under_main_diagonal(int** a, int n, int m, int sum = 0) {
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++)
			sum += a[i][j];
	}
	return sum;
}

int main() {
	setlocale(LC_ALL, "ru");
	int n = 3;
	int** a = memory_allocation(n, n);
	Fill_array(a, n, n);

	printf("%s" "%d" "%s", "Cумма элементов главной диагонали: ", main_diagonal(a, n, n), "\n");
	printf("%s" "%d" "%s", "Cумма элементов побочной диагонали: ", side_diagonal(a, n, n), "\n");
	printf("%s" "%d" "%s", "Cумма элементов ниже главной диагонали: ", sum_over_main_diagonal(a, n, n), "\n");
	printf("%s" "%d" "%s", "Cумма элементов выше главной диагонали: ", sum_under_main_diagonal(a, n, n), "\n");

	delete_Array(a, n, n);
}
-------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------

