// 17. Реализовать операцию div для двух натуральных чисел. 
// Операнды и результат должны быть представлены
// линейными двусвязными списками, информационная часть 
// элементов которых одна цифра числа - тип char.
#include<stdio.h>

struct doublelinked {
    char digit[2]; // информационная часть
    doublelinked* next;
    doublelinked* prev;
};

// удаление списка
void deleteLst(doublelinked* root) {
    doublelinked* temp = root;

    while (root) {
        temp = root->next;
        delete root;

        root = temp;
    }
}

doublelinked* strToDl(doublelinked* Destination, char* strnum) {
    // выделение памяти, если указатель нулевой
    if (!Destination) {
        Destination = new doublelinked;
        Destination->prev = NULL;
        Destination->next = NULL;
    }

    // если строка пустая, вернётся список, хранящий число 0
    if (!*strnum) {
        Destination->digit[0] = '0';
        Destination->digit[1] = '\0';
        return Destination;
    }

    doublelinked* root = Destination; // запоминаем указатель на первый элемент
    doublelinked* prev = NULL;

    while (*strnum) {
        // выделение памяти под новые узлы
        if (!Destination) {
            Destination = new doublelinked;
            Destination->next = NULL;
            Destination->prev = prev;
            prev->next = Destination;
        }

        // заполнение узла
        Destination->digit[0] = *strnum;
        Destination->digit[1] = '\0';

        prev = Destination;
        Destination = Destination->next;

        strnum++;
    }

    return root;
}

doublelinked* goToEndOfList(doublelinked* list) {
    // если указатель на следующий элемент пустой,
    // то мы останемся на последнем непустом элементе
    while (list->next)
        list = list->next;
    return list;
}

int chToInt(char str) {
    return str - 48;
}

char intToCh(int a) {
    return a + 48;
}

char dlSub(char digit1, char digit2) { // вычитание элементов двух списков
    return intToCh(chToInt(digit1) - chToInt(digit2));
}

int divQuotient(doublelinked* a, doublelinked* b) {
    // переместим указатели на концы списков(к младшим разрядам)
    a = goToEndOfList(a);
    b = goToEndOfList(b);

    doublelinked* quot = new doublelinked; // выделяем память на список,
    quot->prev = NULL;                     // являющийся частным двух чисел
    quot->next = NULL;

    doublelinked* root = quot;  // запоминаем указатель на первый элемент частного
    doublelinked* prev = a->prev;

    doublelinked* dividend = a; // делимое
    doublelinked* divider = b; // делитель

    int i = 0;
    

    return i;
}

//doublelinked divRemainder(doublelinked* a, doublelinked* b) {
//
//}

void printDl(doublelinked* list) {
    doublelinked* cur = list;

    while (cur) {
        printf("%s", cur->digit);
        cur = cur->next;
    }
}

int main()
{
    char num1[50];
    gets_s(num1, 50);

    char num2[50];
    gets_s(num2, 50);

    doublelinked* numlst1 = strToDl(NULL, num1);
    doublelinked* numlst2 = strToDl(NULL, num2);
    
    printf("%d", divQuotient(numlst1, numlst2));
    //doublelinked* q = divQuotient(numlst1, numlst2);
    //doublelinked* r = divRemainder();

    deleteLst(numlst1);
    deleteLst(numlst2);
    /*deleteLst(q);
    deleteLst(r);*/
 }
-------------------------------------------------------------------------------------
 #include <stdio.h>
#include <stdlib.h>
#include <clocale>

// удаление списка
template <class Node>
void deleteLst(Node* root) {
	Node* temp = root;

	while (root) {
		temp = root->next;
		delete root;

		root = temp;
	}
}

// разворот списка 
template <class Node>
Node* reverse(Node* root) {
	Node* cur = root, * pr = NULL, * t;

	while (cur) {
		t = cur->next;
		cur->next = pr;
		pr = cur;
		cur = t;
	}

	return pr;
}

struct tree {
	int info;
	bool flag;
	tree* left, * right;
};

void printInfo() {
	printf("Дерево считано с файла; выберите операцию:\n");
	printf("1. Добавить элемент в дерево\n");
	printf("2. Найти элемент в дереве\n");
	printf("3. Удалить элемент из дерева\n");
	printf("4. Удалить поддерево\n");
	printf("5. Прямой обход с печатью\n");
	printf("6. Обратный обход с печатью\n");
	printf("7. Концевой обход с печатью\n");
	printf("8. Прямой обход по уровням\n");
}

// инициализация
tree* InitTree() {
	tree* root = new tree;
	root->flag = false;
	root->left = root->right = NULL;

	return root;
}

// печать узла
void printNode(tree* root) {
	printf("%d\n", root->info);
}

// удаление узла
void deleteNode(tree* root) {
	delete root;
}

// добавление элемента в дерево
tree* AddTree(tree* root, int value) {
	tree* new_node = InitTree();
	new_node->info = value;

	if (!root) {
		root = new_node;
		return root;
	}

	tree* pr = NULL;
	tree* cur = root;
	bool s_r;
	while (cur) {
		pr = cur;
		if (value >= cur->info) {
			s_r = true;
			cur = cur->right;
		}
		else {
			s_r = false;
			cur = cur->left;
		}
	}

	if (s_r) {
		pr->right = new_node;
	}
	else {
		pr->left = new_node;
	}

	return root;
}

// поиск элемента в дереве
void FindTree(tree* root, int value, tree*& ad, tree*& pr) {
	pr = NULL;
	while (root) {
		if (root->info == value) {
			ad = root;
			return;
		}
		else {
			pr = root;

			if (value > root->info) {
				root = root->right;
			}
			else {
				root = root->left;
			}
		}
	}

	ad = pr = NULL;
}

// удаление узла дерева
tree* DelTreeUz(tree* root, int value) {
	tree* pr, * cur;

	FindTree(root, value, cur, pr);

	bool s_r;
	if (cur) {
		if (pr) {
			if (cur->info < pr->info) {
				s_r = false;
			}
			else {
				s_r = true;
			}

			if (!cur->left && !cur->right) {
				if (s_r) {
					pr->right = NULL;
				}
				else {
					pr->left = NULL;
				}
			}
			else if (!cur->left && cur->right) {
				if (s_r) {
					pr->right = cur->right;
				}
				else {
					pr->left = cur->right;
				}
			}
			else if (cur->left && !cur->right) {
				if (s_r) {
					pr->right = cur->left;
				}
				else {
					pr->left = cur->left;
				}
			}
			else {
				tree* t = cur;
				cur = cur->right;
				while (cur->left) {
					pr = cur;
					cur = cur->left;
				}
				t->info = cur->info;
				pr->left = cur->right;
			}
		}
		else {
			if (!cur->left && !cur->right) {
				root = NULL;
			}
			else if (!cur->left && cur->right) {
				root = cur->right;
			}
			else if (cur->left && !cur->right) {
				root = cur->left;
			}
			else {
				tree* t = cur;
				cur = cur->right;
				while (cur->left) {
					pr = cur;
					cur = cur->left;
				}
				t->info = cur->info;
				pr->left = cur->right;
			}
		}

		delete cur;
	}

	return root;
}

// чтение файла и построение двоичного дерева поиска 
// (для проверки работы данной исполнительной системы а также для выполнения задания 2б)
tree* filetotree(const char* filename) {
	FILE* f; fopen_s(&f, filename, "r");
	if (!f) {
		printf("file not open\n");
		return NULL;
	}

	tree* der = NULL;
	char num[11];

	while (fgets(num, 11, f)) {
		der = AddTree(der, atoi(num));
	}

	fclose(f);

	return der;
}

// структура для представления стека и очереди 
// (линейный односвязный список, инф. часть которого – указатель на элемент дерева)
struct node {
	tree* ptr;
	node* next;
};

// добавление в начало списка (для работы со стеком)
void push(node** root, tree* newptr) {
	node* newnode = new node;
	newnode->next = *root;
	newnode->ptr = newptr;

	*root = newnode;
}

// добавление в конец списка (для работы с очередью)
void pushBack(node** root, tree* newptr) {
	node* newnode = new node;
	newnode->ptr = newptr;
	newnode->next = NULL;

	if (!*root) {
		*root = newnode;
	}
	else {
		node* c_root = *root;
		while (c_root->next) {
			c_root = c_root->next;
		}
		c_root->next = newnode;
	}
}

// удаление элемента и получение его значени из начала списка (для работы со стеком и очередью)
tree* pop(node** root) {
	if (!*root) return NULL;

	node* t = *root;

	*root = (*root)->next;

	tree* tp = t->ptr;
	delete t;

	return tp;
}

// прямой обход (сверху вниз)
void PreOrder(tree* root, void (*execNode)(tree*)) {
	node* pointerStack = NULL;
	while (pointerStack || root) {
		if (root) {
			execNode(root);

			if (root->right) {
				push(&pointerStack, root->right);
			}
			root = root->left;
		}
		else {
			root = pop(&pointerStack);
		}
	}

	deleteLst(pointerStack);
}

// поперечный обход (слева направо)
void InOrder(tree* root, void (*execNode)(tree*)) {
	node* pointerStack = NULL;
	while (pointerStack || root) {
		if (root) {
			push(&pointerStack, root);
			root = root->left;
		}
		else {
			root = pop(&pointerStack);
			execNode(root);
			root = root->right;
		}
	}

	deleteLst(pointerStack);
}

// концевой обход (снизу вверх)
void PostOrder(tree* root, void (*execNode)(tree*)) {
	node* pointerStack = NULL;
	push(&pointerStack, root);
	tree* help;

	while (pointerStack) {
		help = pop(&pointerStack);
		if (help) {
			if (!help->left && !help->right) {
				execNode(help);
			}
			else {
				if (help->flag) {
					help->flag = false;
					execNode(help);
				}
				else {
					help->flag = true;
					push(&pointerStack, help);
					push(&pointerStack, help->right);
					push(&pointerStack, help->left);
				}
			}
		}

	}

	deleteLst(pointerStack);
}

// прямой обход по уровням
void lvlPreOrder(tree* root, void (*execNode)(tree*)) {
	node* pointerQueue = NULL;
	tree* help;
	pushBack(&pointerQueue, root);

	while (pointerQueue) {
		help = pop(&pointerQueue);
		execNode(help);

		if (help->left) {
			pushBack(&pointerQueue, help->left);
		}
		if (help->right) {
			pushBack(&pointerQueue, help->right);
		}
	}

	deleteLst(pointerQueue);
}

// удаление поддерева из дерева
tree* DelTreeP(tree* root, int value, char side) {
	tree* cur, * pr;
	FindTree(root, value, cur, pr);

	if (cur) {
		if (side == 'L') {
			pr = cur->left;
			cur->left = NULL;
		}
		else if (side == 'R') {
			pr = cur->right;
			cur->right = NULL;
		}
	}

	PostOrder(pr, deleteNode);

	return root;
}

int main() {
	setlocale(LC_ALL, "");

	tree* test = filetotree("nums.txt");

	if (!test) {
		printf("error\n");
		return 1;
	}

	bool cycle = true;
	int oper;
	int el; char s;

	printInfo();

	while (cycle) {
		scanf_s("%d", &oper);
		switch (oper) {
		case 1:
			scanf_s("%d", &el);
			test = AddTree(test, el);

			break;
		case 2:
			tree * ad, * pr;
			scanf_s("%d", &el);
			FindTree(test, el, ad, pr);
			PreOrder(ad, printNode);

			break;
		case 3:
			scanf_s("%d", &el);
			DelTreeUz(test, el);

			break;
		case 4:
			scanf_s("%d", &el);
			scanf_s("%c", &s, 1);
			DelTreeP(test, el, s);

			break;
		case 5:
			PreOrder(test, printNode);

			break;
		case 6:
			InOrder(test, printNode);

			break;
		case 7:
			PostOrder(test, printNode);

			break;
		case 8:
			lvlPreOrder(test, printNode);

			break;
		default:
			cycle = false;
		}
	}

	PostOrder(test, deleteNode);
}
-------------------------------------------------------------------------------------
