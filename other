// убывающая последовательность
#include<iostream>
using namespace std;

int main() {
	setlocale(LC_ALL, "rus");
	const int len_arr = 6;
	int arr[len_arr] = { 0 };
	for (int i = 0; i < len_arr; i++) {
		scanf_s("%d", &arr[i]);
	}

	int left, right;
	bool F = 0;

	for (int i = 0; i < len_arr; i++) {
		if (arr[i] > 0) {
			left = i;
			i = len_arr;
		}
	}

	for (int i = 0; i < len_arr; i++) {
		if (arr[i] > 0) {
			right = i;
		}
	}

	if (right - left <= 2) {
		printf("Между первым и последним положительными числами нет последовательности");
	}
	else 
		{
		for (int i = left + 1; i < right - 1; i++) {
			if (arr[i] > arr[i + 1])
				F = 1;
			else
				F = 0;
		}
		if (F)
			printf("Последовательность убывающая");
		else
			printf("Последовательность не убывающая");
	}
}
----------------------------------------------------------------------------------------------------------------------
// Дана квадратная вещественная матрица n x n
#include<iostream>	
using namespace std;

int main() {
	setlocale(LC_ALL, "ru");
	const int n = 3;
	int arr[n][n] = {0};

	printf("%s" "%d" "%s" "%d" "%s", "Введите двумерный массив размера ", n, "x", n, ":\n");

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf_s("%d", &arr[i][j]);
		}
	}

	printf("\n");

	/*for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			printf("%d" "%s", arr[i][j], " ");
		}
		printf("\n");
	}*/


	int S1 = 0, S2 = 0, S3 = 0, S4 = 0;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j)
				S1 += arr[i][j];
			if (i + j == 2)
				S2 += arr[i][j];
			if (i > j)
				S3 += arr[i][j];
			if (i < j)
				S4 += arr[i][j];
		}
	}

	printf("%s" "%d" "%s", "Cумма элементов главной диагонали: ", S1, "\n");
	printf("%s" "%d" "%s", "Cумма элементов побочной диагонали: ", S2, "\n");
	printf("%s" "%d" "%s", "Cумма элементов ниже главной диагонали: ", S3, "\n");
	printf("%s" "%d" "%s", "Cумма элементов выше главной диагонали: ", S4, "\n");
}


----------------------------------------------------------------------------------------------------------------------
// Значение и индекс ближайшего элемента к M
#include<iostream>
#include<stdlib.h>
using namespace std;

int main() {
	setlocale(LC_ALL, "ru");
	int n, i, M, index, value, difference, min_difference = 999;
	int* a;
	printf("Введите число М: ");
	scanf_s("%d", &M);
	printf("Введите число n: ");
	scanf_s("%d", &n);

	a = new int[n];
	for (i = 0; i < n; i++) {
		scanf_s("%d", a + i);
	}

	for (i = 0; i < n; i++) {
		difference = abs(*(a + i) - M);
		if(difference < min_difference){
			index = i;
			value = *(a + i);
			min_difference = difference;
		}
	}

	printf("%s" "%d" "%s","Индекс ближайшего элемента: ", index, "\n");
	printf("%s" "%d","Значение ближайшего элемента ", value);

	delete[] a;
}
----------------------------------------------------------------------------------------------------------------------
// №8, praktika, среди строк нечетных эл-ов найти с максимальной суммой по модулю
int** V_data(int n, int m) {
	int** a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];
	return a;
}

int** Fill_array(int** a, int n, int m) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++)
			scanf_s("%d", &a[i][j]);
	}
	return a;
}

int String_Number(int ** a, int n, int m, int string_number){
	int sum, max_sum = INT_MIN;
	for (int i = 0; i < n; i++) {
		sum = 0;
		for (int j = 0; j < m; j++) {
			sum += abs(a[i][j]);
		}
		if (sum > max_sum)
			string_number = i;
	}

	return string_number;
}

int main() {
	int string_number = 0;
	int n = 3, m = 2;
	
	int** a = V_data(n, m);
	Fill_array(a, n, m);


	printf("%d", String_Number(a, n, m, string_number));
}
----------------------------------------------------------------------------------------------------------------------
#include<iostream>
using namespace std;

int** V_data(int n, int m) {
	int** a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];
	return a;
}

int** Fill_array(int** a, int n, int m) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++)
			scanf_s("%d", &a[i][j]);
	}
	return a;
}

bool Pal_check(int** a, int n) {
	bool F = 1;
	for (int i = 0; i < n; i++) {
		for (int j = n - 1; j >= i; j--) {
			if (a[j][i] != a[i][i]) {
				F = 0;
				break;
			}
		}
		if (!F)
			break;
	}
	return F;
}

int main() {
	int n = 5, m = 5;
	int** a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];
	Fill_array(a, n, m);
	
	printf("%d", Pal_check(a, n));

}
------------------------------------------------------------------------------------------------------
// №13, praktika
#include<iostream>
using namespace std;

int** V_data(int n, int m) {
	int** a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];
	return a;
}

int** Fill_array(int** a, int n, int m) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++){
			printf("a[%d][%d] = ", i, j);
			scanf_s("%d", &a[i][j]);
		}
	}
	return a;
}

int Print_array(int ** a, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			printf("a[%d][%d] = ", i, j);
			printf("%d\n", a[i][j]);
		}
	}
	return 1;
}

int Array_smoothing(int** a, int** b, int n, int m) {
	for (int i = 0; i < m - 1; i++) {
		for (int j = 0; j < n - 1; j++) {
			b[i][j] = 
		}
	}
	return Print_array(b, n, m);
}

int main() {
	setlocale(LC_ALL, "ru");
	int n = 3, m = 3;

	int** a = V_data(n, m);
	Fill_array(a, n, m);
	printf("---------------------------------------------\n");
	int** b = V_data(n, m);

	Array_smoothing(a, b, n, m);
}
