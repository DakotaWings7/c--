
//		I) На предприятии есть БД о сотрудниках:
// 1) Ф.И.О (char 30);	2) год рождения; 
// 3) Оклад float;		4) дата устройства на работу char[11];
// 
// Программа выводит список сотрудников, стаж которых > 20 лет

#define _CRT_SECURE_NO_WARNINGS

#include<string.h>
#include<iostream>
#include<math.h>

class Worker {
private:
	char* fio;
	char born[5];
	int salary;
	char date_start[11];

public:
	Worker() {
		fio = new char[20];
		born[0] = '\0';
		salary = 0;
		date_start[0] = '\0';
	}

	Worker(int n) {
		fio = new char[n];
		born[0] = '\0';
		salary = 0;
		date_start[0] = '\0';
	}

	void setFio(char* s) { strcpy(fio, s); }
	void setBorn(char* s) { strcpy(born, s); }
	void setSalary(int a) { salary = a; }
	void setDate(char* s) { strcpy(date_start, s); }

	char* getFio() { return fio; }
	char* getBorn() { return born; }
	int getSalary() { return salary; }
	char* getDate() { return date_start; }

	void Print() {
		printf("%s %s %d %s\n", fio, born, salary, date_start);
	}

	void Scanf() {
		char inits[5];
		scanf("%s%s%s%d%s", fio, inits, born, &salary, date_start);
		strcat(fio, " ");
		strcat(fio, inits);
	}
};

int pow(int a, int b) {
	int result = 1;
	for (int i = 0; i < b; i++)	result *= a;
	return result;
}

const int THIS_YEAR = 2022;

int getExperience(char* str) {
	int j = 3, k = 6;
	int year = 0;
	while (str[k]) {
		year += pow(10, j) * (str[k] - '0');
		k++; j--;
	}
	return THIS_YEAR - year;
}



//		II) Описать Base:
//	Поля: массив Worker, текущая размерность, максимальная размерность
//	Методы:
// а) Конструкторы; б) Деструкторы; в) Создание базы из текстового файла; г) Печать базы;
// д) Добавление в базу; е) Удаление из базы; ж) Корректировка записей; з) Копирование базы;
// и) Увеличение памяти для базы;

class Base {
private:
	Worker* a;
	int n; // текущая размерность
	int max_n; // максимальная размерность
public:
	Base() {
		max_n = 100;
		a = new Worker[n];
		n = 0;
	}
	Base(int maxn) {
		max_n = maxn;
		a = new Worker[max_n];
		n = 0;
	}
	~Base() {
		delete[] a;
	}

	void setWorkerBase(Worker* a) { this->a = a; }
	void setCurrentSize(int n) { this->n = n; }
	void setMaxSize(int max_n) { this->max_n = max_n; }

	Worker* getWorkerBase() { return a; }
	int getCurrentSize() { return n; }
	int getMaxSize() { return max_n; }

	int getBaseFromFile(const char* fname) {
		FILE* f;
		if ((f = fopen(fname, "r")) == NULL) return 1;
		char* fio = new char[20];
		char born[5];
		int salary;
		char date_start[11];
		char inits[5];
		int k = 0;
		while (fscanf(f, "%s%s%s%d%s", fio, inits, born, &salary, date_start) == 5) {
			strcat(fio, " ");
			strcat(fio, inits);
			a[k].setFio(fio);
			a[k].setBorn(born);
			a[k].setSalary(salary);
			a[k].setDate(date_start);
			k++;
		}
		n = k;
		fclose(f);
		return 0;
	}
	void PrintBase() {
		for (int i = 0; i < n; i++)
			a[i].Print();
	}
};

int main() {
	/*int i;					// Worker's experience >=- 20
	Worker base[100];

	for (i = 0; i < 3; i++)
		base[i].Scanf();

	printf("-------------------------------\n");

	for (i = 0; i < 3; i++)
	{
		if (getExperience(base[i].getDate()) >= 20)
			base[i].Print();
	}*/

	Base workersBase;
	if (!workersBase.getBaseFromFile("1.txt"))
		printf("Ok\n");

}
----------------------------------------------------------------------
// Описать класс Треугольник
// массив треугольников, выяснить какой из них больше
// вхождение треугольника в другой
#include<iostream>
#define _CRT_SECURE_NO_WARNINGS
class Point {
public:
	float x, y;
public:
	Point(float x1 = 0, float y1 = 0) { 
		x = x1;	y = y1;
	}

	void ShowPoint() { printf("%1.f %1.f", x, y); }
	
	void operator +=(Point& point) {
		x = x + point.x;
		y = y + point.y;
	}
};

class Triangle {
	char* name;
	Point v1, v2, v3;
	double a, b, c;
public:
	static int count;

	Triangle() {
		name = '\0';
		Point(v1); Point(v2); Point(v3);
		a = b = c = 0.0;
	}

	Triangle(const Point& p1, const Point& p2, const Point& p3) : v1(p1), v2(p2), v3(p3) {
		name = new char[32];
		sprintf(name, "Triangle %d", count); count++;
		a = sqrt((v1.x - v2.x) * (v1.x - v2.x) + (v1.y - v2.y) * (v1.y - v2.y));
		b = sqrt((v2.x - v3.x) * (v2.x - v3.x) + (v2.y - v3.y) * (v2.y - v3.y));
		c = sqrt((v1.x - v3.x) * (v1.x - v3.x) + (v1.y - v3.y) * (v1.y - v3.y));
	}

	~Triangle() { delete[] name; }

	Triangle(const Triangle& obj) {
		strcpy(name, obj.name);
		v1 = obj.v1; v2 = obj.v2; v3 = obj.v3;
		a = obj.a;   b = obj.b;   c = obj.c;
	}

	void ShowTriangle() {
		printf("%s", name);
		printf("v1 = "); v1.ShowPoint();
		printf("v2 = "); v2.ShowPoint();
		printf("v3 = "); v3.ShowPoint();
		printf("a = %1f, b = %1f, c = %1f", a, b, c);
	}

	double GetSquare()
	{
		double p = (a + b + c) / 2;
		return sqrt(p * (p - a) * (p - b) * (p - c));
	}

	bool operator >(Triangle& obj) {
		return GetSquare() > obj.GetSquare();
	}

	void Move(Point& point)
	{
		v1 += point;
		v2 += point;
		v3 += point;
	}
};



int main() {
	Triangle* Figures = new Triangle[3];

	
}
